{"version":3,"sources":["components/Navigation.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","react_default","a","createElement","className","href","this","props","titulo","Component","Form","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","autor","descripcion","prioridad","handleInput","bind","assertThisInitialized","handleSubmit","e","preventDefault","onAddTodo","setState","document","getElementById","reset","_e$target","target","value","name","defineProperty","onSubmit","id","type","onChange","placeholder","autoFocus","App","todos","handleAdd","todo","concat","toConsumableArray","index","window","confirm","filter","i","_this2","map","key","onClick","remove","components_Navigation","length","components_Form","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ec231aff.chunk.js","sourcesContent":["import React ,{Component}from 'react';\n\nclass Navigation extends Component{\n    render(){\n        return(\n            <nav className=\"navbar navbar-dark bg-dark\">\n                <a href=\"/\" className=\"text-white\">\n                    {this.props.titulo}\n                    </a>\n            </nav>\n        )\n    }\n}\nexport default Navigation","import React ,{Component}from 'react';\n\nclass Form extends Component{\n    constructor (props) {\n        super(props);\n        this.state = {\n          titulo: '',\n          autor: '',\n          descripcion: '',\n          prioridad: 'low'\n        };\n        this.handleInput = this.handleInput.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n      }\n    \n      handleSubmit(e) {\n        e.preventDefault();\n        this.props.onAddTodo(this.state);\n        this.setState({\n          titulo: '',\n          autor: '',\n          descripcion: '',\n          prioridad: 'low'\n        });\n        let formu = document.getElementById(\"formu\")\n        formu.reset()\n      }\n    \n      handleInput(e) {\n        const {value, name} = e.target;\n        this.setState({\n          [name]: value\n        });\n      }\n    render(){\n        return(\n            <div className=\"card\">\n                <form className=\"card-body\" onSubmit={this.handleSubmit} id=\"formu\">\n                    <div className=\"form-group\">\n                        <input name=\"titulo\" type=\"text\" className=\"form-control\" onChange={this.handleInput} placeholder=\"Titulo\" autoFocus/>\n                    </div>\n                    <div className=\"form-group\">\n                        <input name=\"autor\" type=\"text\" className=\"form-control\" onChange={this.handleInput} placeholder=\"Autor\"/>\n                    </div>\n                    <div className=\"form-group\">\n                        <input name=\"descripcion\" type=\"text\" className=\"form-control\" placeholder=\"Descripcion\" onChange={this.handleInput }/>\n                    </div>\n                    <div className=\"form-group\">\n                        <select\n                            name=\"prioridad\"\n                            className=\"form-control\"\n                            value={this.state.prioridad}\n                            onChange={this.handleInput}\n                        >\n                        <option>baja</option>\n                        <option>media</option>\n                        <option>alta</option>\n                        </select>\n                    </div>\n                    <button type=\"submit\" className=\"btn btn-primary\">Save</button>\n                </form>\n            </div>\n        )\n    }\n}\nexport default Form","import React,{Component}from 'react';\nimport './App.css';\nimport './components/Navigation'\nimport Navigation from './components/Navigation';\nimport Form from './components/Form';\nimport {todos} from './todos.json'\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      todos\n    }\n    this.handleAdd = this.handleAdd.bind(this)\n  }\n  handleAdd(todo){\n    this.setState({\n      todos : [ ...this.state.todos,todo]\n    })\n  }\n  remove(index){\n    if(window.confirm(\"seguro que quieres eliminarlo\")){\n      this.setState({\n        todos:this.state.todos.filter((e,i)=>{\n          return i !== index\n        })\n      })\n    }\n  }\n  render (){\n    const todo = this.state.todos.map((todo,i)=>{\n      return (\n        <div className=\"col-md-4\">\n          <div className=\"card mt-4\">\n            <div className=\"card-header\">\n              <p>{todo.titulo}</p>\n              <span className=\"badge badge-pill badge-info ml-2\">\n                {todo.prioridad}\n              </span>\n            </div>\n            <div className=\"card-body\">\n              <p key={i}>{todo.descripcion}</p>\n            </div>\n            <div className=\"card-footer\">\n              <button className=\"btn btn-danger\" onClick={this.remove.bind(this,i)}>Eliminar</button>\n            </div>\n          </div>\n        </div>\n      )\n    })\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Navigation titulo=\"navegacion por js\"></Navigation>\n          <span className=\"badge badge-pill badge-info ml-2\">\n            {this.state.todos.length}\n          </span>\n        </header>\n          <div className=\"container\">\n            <Form onAddTodo={this.handleAdd}></Form>\n            <div className=\"row mt-4\">{todo}</div>\n          </div>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}